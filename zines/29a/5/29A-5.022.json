{
  "reference": "Volume Two, Issue 12, Phile #6 of 11",
  "title": "Encryptation through relocs",
  "authors": "Tcp/29A",
  "date": "",
  "historical_context": "This article discusses techniques used by virus coders in the early days of Windows executable manipulation, highlighting the interplay between executable loading and relocation sections.",
  "target_audience": "Hackers, virus coders, security researchers, and those interested in malware techniques.",
  "short_summary": "The article explains a method for encrypting viruses using the relocation section of Windows executables, allowing the virus to be decrypted automatically by the operating system upon loading.",
  "summary": "In 'Encryptation through relocs', Tcp/29A delves into a clever technique employed by virus coders to hide the true nature of their malicious code. By manipulating the relocation section (.reloc) of Windows executables, the author outlines a method where a virus can be encrypted in such a way that it is decrypted automatically by Windows during the loading process. The article explains that when an executable is loaded, Windows applies relocations based on the base address specified in the header. By setting this base to a value that Windows will not accept, the executable is forced to load at the default base of 0x400000, allowing the virus to be decrypted seamlessly without the need for a separate decryption routine. This technique showcases the intricate relationship between executable loading and memory management in Windows, providing insights into early malware development strategies.\n\nThe author further elaborates on the technical details of this method, emphasizing the importance of nullifying the original relocations and creating a new .reloc section that points to the encrypted virus code. The encryption formula provided demonstrates how the virus can be transformed into a format that Windows will decrypt upon execution. Tcp/29A also notes limitations in NT systems regarding the use of this method, particularly concerning base addresses that must adhere to specific constraints. Overall, this article serves as a fascinating exploration of early virus coding techniques and the clever exploitation of Windows' executable handling mechanisms."
}