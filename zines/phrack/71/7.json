{
  "reference": "Volume 0x10, Issue 0x47, Phile #0x07 of 0x11",
  "title": "Bypassing CET & BTI With Functional Oriented Programming",
  "authors": "LMS",
  "date": "January, 2024",
  "short_summary": "This article introduces Functional Oriented Programming (FOP) as a technique to bypass modern CPU protections like Control-Flow Enforcement Technology (CET) and Branch Target Identification (BTI). It discusses the identification of FOP gadgets and the use of a dispatcher to orchestrate attacks, demonstrating the potential of FOP in exploiting memory corruption vulnerabilities.",
  "summary": "The article presents Functional Oriented Programming (FOP) as a novel approach to bypassing modern security mechanisms such as CET and BTI, which are designed to thwart traditional code reuse attacks like Return-Oriented Programming (ROP) and Jump-Oriented Programming (JOP). FOP leverages entire functions as gadgets, allowing attackers to utilize the intended functionality of these functions while manipulating their parameters to achieve arbitrary memory writes. This method is particularly relevant in the context of Linux environments, where the author demonstrates the identification of FOP gadgets and the construction of FOP chains through a symbolic execution framework.\n\nThe paper details the process of identifying FOP gadgets, emphasizing the importance of a reliable dispatcher that can manage the execution of these gadgets without violating the constraints imposed by modern protections. The author provides examples of successful FOP chains that manipulate registers and memory to execute arbitrary code, highlighting the technique's potential effectiveness against contemporary defenses. Furthermore, the article discusses the challenges associated with FOP, including the necessity for memory corruption vulnerabilities and the complexity of constructing long FOP chains, which may hinder practical implementation. Overall, the paper positions FOP as a significant advancement in the landscape of code reuse attacks, warranting further exploration and research."
}