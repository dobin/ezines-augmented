{
  "reference": "Volume 0x10, Issue 0x46, Phile #0x03 of 0x0f",
  "title": "Attacking JavaScript Engines",
  "authors": "saelo",
  "date": "2016",
  "short_summary": "This article provides an in-depth analysis of a specific vulnerability in JavaScriptCore (CVE-2016-4622), detailing the exploitation techniques and the internal workings of JavaScript engines. It covers the JavaScript engine architecture, the nature of the vulnerability, and the steps to exploit it for remote code execution.",
  "summary": "The article begins with an overview of JavaScriptCore, the engine behind WebKit, and introduces CVE-2016-4622, a vulnerability that allows attackers to leak memory addresses and inject fake JavaScript objects. The author explains the intricacies of JavaScript's type system and how the vulnerability arises from the weak typing and conversion rules in JavaScript. By manipulating the `Array.prototype.slice` method, an attacker can exploit the engine's assumptions about array lengths and access out-of-bounds memory, leading to potential remote code execution.\n\nThe article further delves into the internals of JavaScriptCore's memory management, including garbage collection and the structure of JavaScript objects. It outlines the construction of exploit primitives, such as `addrof` and `fakeobj`, which enable the attacker to leak addresses and inject arbitrary objects into the engine. The author provides a detailed plan for executing the exploit, including the creation of a fake `Float64Array` instance that allows arbitrary memory read/write operations. The article concludes with a discussion on the implications of exploiting the renderer process, including bypassing the same-origin policy to access sensitive user data, such as emails from Gmail."
}